generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum RoleType {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  CASH_ON_DELIVERY
}

// 游릭 User Model
model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      RoleType[]     @map("Role")
  orders    Order[]
  addresses Address[]
  reviews   Review[]
  cart      Cart?
  payments  Payment[]
  sessions  Session[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// 游릭 Session Model
model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
}

// 游릭 Address Model
model Address {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 游릭 Product Model
model Product {
  id          String         @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  categories  ProductCategory[]
  reviews     Review[]
  images      ProductImage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  OrderItem OrderItem[]

  CartItem CartItem[]
}

// 游릭 Product Images Model
model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  url       String
}

// 游릭 Category Model
model Category {
  id        String             @id @default(uuid())
  name      String             @unique
  products  ProductCategory[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

// 游릭 Many-to-Many Relation Table: ProductCategory (Junction Table)
model ProductCategory {
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId]) // Composite Primary Key
}



// 游릭 Order Item Model
model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

// 游릭 Cart Model
model Cart {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 游릭 Cart Item Model
model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

// 游릭 Review Model
model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 游릭 Order Model
model Order {
  id        String       @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  total     Float
  status    OrderStatus  @default(PENDING)
  payment Payment? @relation(fields: [paymentId],references: [id])
  paymentId String? @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// 游릭 Payment Model
model Payment {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  order Order?
  orderId   String?
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
